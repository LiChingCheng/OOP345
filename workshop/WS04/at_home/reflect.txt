Li-Ching,Cheng 143292175 SEE

The composition creates the component objects by using the constructor which receives two parameters.
It allocates the new memory and stores the values into its pointer.

MessagePack::MessagePack(Message** msg, int cnum) {
		if (cnum > 0 && msg != nullptr) {
			message = new Message[cnum]; --->To allocate the new memory.
			num = 0;
			for (int i = 0; i < cnum; i++) {
				if (!msg[i]->empty()) {
					message[num++] = *msg[i]; --->To store the values into its pointer.
				}
			}
		}	

The aggregation constructor allocates the new Message* type memory for itself and then add the Message to it.
However, it doesn't have the the right to create or destroy the Message objects. 
When its destructor called, the Message still exist.

Notifications::Notifications(int maxNum) {
		if (maxNum > 0) {
			max = maxNum;
			num = 0;
			message = new const Message*[max]; ---->It allocates a pointer type Message to point the Message.
		}						But it doesn't own any values.
}

In the composition, the move or copy functions are move or copy the values of that object.
However, in the implementation, the move or copy functions are move or copy the address of that object.

MessagePack& MessagePack::operator=(const MessagePack& msgp) {
		if (&msgp != this && msgp.message != nullptr) {
			if (message != nullptr) {
				delete[]message;
			}
			message = nullptr;
			num = msgp.num;
			message = new Message[num];
			for (int i = 0; i < num; i++) {
				message[i] = msgp.message[i]; --->copy the values.
			}				      --->stores in: class MessagePack {Message* message;} --->It's a pointer.
		}
		return *this;
	}

	Notifications& Notifications::operator=(const Notifications& ntf) {
		if (&ntf != this) {
			if (message != nullptr) {
				delete[]message;
			}
			message = nullptr;
			max = ntf.max;
			num = 0;
			message = new const Message*[max];
			for (int i = 0; i < num; i++) {
				message[num++] = ntf.message[i]; --->copy the adderss      
			}					 --->stores in: class Notifications {const Message** message;} --->It's a pointer to a pointer
		}
		return *this;
	}


