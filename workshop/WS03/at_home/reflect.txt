Li-Cheng,Cheng 143292175 SEE

The reason for specializing the sum() member function and the initial value for a summation
is because we declare the specific types for them. For example,
template <>
	int SummableLVPair<string, int>::sumValue = 0; --->string,int
template<>
	string SummableLVPair<string, string>::sumValue = " ";  --->string,string
template<>
	string SummableLVPair<string, string>::sum(const string& label, const string& sum)const{...}
	--->string,string

we already assign the parameter type to (string,int) or (string,string), so when the program 
receive spacific type parameters, the program will directly comes to those template specialization.

The size_t type minimum field width (min) is a static data member. 
The static data member can only define once in the code. It calls One Definition Rule.
If we define within the class, it will be defined many times when we create several translation units 
then it will break the One Definition Rule. 

outside the class:
template <typename L, typename V>
size_t SummableLVPair<L, V>::min = 0u; --->when we have same type of template, this variable can keep being used.
					    It won't start from 0 (because it is static data member.)

not within the class:
size_t min{ 0u }; --->If we declar within class(no static), it will start from 0 again when you create a new object.
			Then this variable will not be the same and does not look pretty.  

 
