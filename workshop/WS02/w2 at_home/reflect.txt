
The copy constructors deep copy the reference object to a newly object and the copy operators deep copy the reference object to an exist object. 
Both of them receive the const lvalue because they can't change the reference object. 
However, the move constructors shallow copy the reference object to a newly object and then delete the reference object. 
Also, the move operators shallow copy the reference object to the exist object and then delete the reference object. 
The move constructor and move operator receive the (not const) rvalue and they delete the reference object after they copy them.
ex: 
Text& Text::operator=(const Text& t){           <---copy operator(receive const lvalue)
	if(this!=&t){
		sStored=t.sStored;
		delete[] str;              <---delete this pointer
		str=new std::string[sStored];            <---allocate new memory 
		for(size_t i=0;i<sStored;i++){
			str[i]=t.str[i];             <---deep copy the reference object data
		}
	}
	return *this;
}

Text& Text::operator=(Text&& t){        <---move operator (receive rvalue)
	if(this!=&t){
		sStored=t.sStored;
		delete[] str;               <---delete this pointer
		str=t.str;             <---shallow copy the reference object
		t.str=nullptr; 		  <---remove the reference object
		t.sStored=0;                (assign to safe empty state) 
		}
	return *this;
}

We add one move constructor and one move operator in the our at home part. 
In w2.cpp at home, Text d = std::move(a), move() means return an rvalue, 
so it will call the move constructor that we add in Text at home. Same as a=std::move(d), 
a object equals to an rvalue(move(d)), so our program calls the move operator (which receives the Text&&(rvalue)).

